#!/usr/bin/env ruby

require 'rbconfig'
STDERR.puts "DEBUG: ruby prefix: #{RbConfig::CONFIG['prefix']}"

require 'rubygems'
require 'tempfile'
require 'fileutils'
require 'json'
require 'etc'
require 'dbus'

module CupsBackend
  class Job
    attr_reader :job_id, :user, :title, :copies, :options, :source
    def initialize(*argv)
      @job_id, @user, @title, @copies, @options, @source = *argv
    end

    def read
      if @source
        File.open(@source, 'rb', &:read)
      else
        STDIN.read
      end
    end

    def tmpInput
      File.open("/tmp/rawimg-backend-#{$$}.tmp.#{@job_id}", 'wb') { |fp| fp << self.read }
    end
  end
end


if ARGV.size >= 5

job = CupsBackend::Job.new(*ARGV)

# ignore copies
#
STDERR.puts "INFO: Printing page 1"
STDERR.puts "PAGE: 1"

input = job.tmpInput

type = ENV['CONTENT_TYPE']

ext = case type
when 'image/png'
  "png"
when 'image/jpeg'
  "jpg"
when 'application/pdf'
  "pdf"
else
  "bin"
end

nicename = "job-#{job.job_id}.#{ext}"

class Notifier < DBus::Object
  dbus_interface "net.livelinktechnology.ImageCapture" do
    # Define a signal in the interface:
    dbus_signal :GotFile, "type:s, path:s"
  end
end


bus = DBus.system_bus

notifier = Notifier.new('/net/livelinktechnology/ImageCapture')
service = bus.request_service("net.livelinktechnology.ImageCapture")
service.export(notifier)

begin
  FileUtils.cp(input.path, src="/tmp/#{nicename}")

  File.open(fn="/tmp/raw-#{job.job_id}-info.json", 'w') do |fp|
    fp << JSON.pretty_unparse({'ENV' => ENV.to_hash, 'ARGV' => ARGV})
  end
  File.chmod(0644, "/tmp/#{nicename}", input.path, fn)

  notifier.GotFile(type, src)
ensure
  File.unlink(input.path)
end

exit 0

else
  puts %Q[direct #{File.basename $0}:/ "Image Capture" "Img-Cap" "MFG:LiveLink;MDL:Image Capture;DES:LiveLink Image Capture;CLS:PRINTER"]
end


