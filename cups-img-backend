#!/usr/bin/env ruby

require 'rubygems'
require 'tempfile'
require 'fileutils'
require 'json'
require 'etc'

module CupsBackend
  class Job
    attr_reader :job_id, :user, :title, :copies, :options, :source
    def initialize(*argv)
      @job_id, @user, @title, @copies, @options, @source = *argv
    end

    def read
      if @source
        File.open(@source, 'rb', &:read)
      else
        STDIN.read
      end
    end

    def tmpInput
      File.open("/tmp/rawimg-backend-#{$$}.tmp.#{@job_id}", 'wb') { |fp| fp << self.read }
    end
  end
end


if ARGV.size >= 5

job = CupsBackend::Job.new(*ARGV)

# ignore copies
#
STDERR.puts "INFO: Printing page 1"
STDERR.puts "PAGE: 1"

input = job.tmpInput
ext = case ENV['CONTENT_TYPE']
when 'image/png'
  "png"
when 'image/jpeg'
  "jpg"
when 'application/pdf'
  "pdf"
else
  "bin"
end

nicename = "job-#{job.job_id}.#{ext}"

begin
  #FileUtils.cp(input.path, "/tmp/raw-#{job.job_id}-data.bin")
  FileUtils.cp(input.path, "/tmp/#{nicename}")
  File.open(fn="/tmp/raw-#{job.job_id}-info.json", 'w') { |fp| fp << JSON.pretty_unparse({'ENV' => ENV.to_hash, 'ARGV' => ARGV}) }
  File.chmod(0644, "/tmp/#{nicename}", input.path, fn)

  #if File.exist?("/etc/imgcap.conf")

  info = Etc.getpwnam(job.user)
  FileUtils.mkdir_p(dir = (info.dir + "/ImageCapture"))
  File.chown(info.uid, info.gid, dir)


  FileUtils.cp(input.path, "#{dir}/#{nicename}")
  File.chown(info.uid, info.gid, "#{dir}/#{nicename}")
ensure
  File.unlink(input.path)
end

exit 0

else
  puts %Q[direct #{File.basename $0}:/ "Image Capture" "Img-Cap" "MFG:LiveLink;MDL:Image Capture;DES:LiveLink Image Capture;CLS:PRINTER"]
end


